<?xml version="1.0"?>
<doc>
  <members>
    <member name="W:Keywords">
      <summary>
        Зарезервовані слова, що використовуються мовою для спеціальних цілей.
      </summary>
    </member>
    <member name="K:include">
      <summary>
        Включення в програму інших файлів у форматі (.bpi). Ця опція дозволяє розвантажити основний код за рахунок розділення великої програми на окремі файли. Імена файлів-включень вказуються без розширення, шлях вказується відносно папки з програмою. Команда include може використовуватися тільки в основній програмі. Використання команди в файлах включень (.bpi) і модулів (.bpm) викличе помилку. У виконуваній програмі (.bp) файли включень можна вказувати в будь-якому місці. В результаті код із файла включення буде включений у виконувану програму в місці оголошення команди include.
      </summary>
      <example>
        <text>
          Приклад підключає до виконуваної програми файл з ім'ям "MyInclude.bpi".
        </text>
        <code>
          include "MyInclude"
        </code>
      </example>
    </member>
    <member name="K:import">
      <summary>
        Імпортує до програми інші файли у форматі (.bpm). Імена імпортованих файлів вказуються без розширення, шлях вказується відносно папки з програмою. Команда import може використовуватися в будь-яких файлах (у виконуваній програмі, в файлах включень, у файлах модулів). У файлах модулів можна розміщувати тільки код функцій (методів модуля), змінні (властивості модуля), команди імпорту інших модулів. До вихідної програми потрапляє код тільки тих методів і властивостей модулів, які було викликано безпосередньо в коді програми. Більш детально з модулями і правилами їх опису можна познайомитися у папці з прикладами.
      </summary>
      <example>
        <text>
          Приклад підключає до виконуваної програми файл з ім'ям "MyModule.bpm".
        </text>
        <code>
          import "MyModule"
        </code>
      </example>
    </member>
    <member name="K:folder">
      <summary>
        Складається з ключового слова і двох ключів. Перший ключ вказує куди завантажувати програму: "sd" - на SD карту, "prjs" - в пам'ять блоку. Другий ключ встановлює ім'я нової папки для проекту, яка буде створена при завантаженні програми в блок. Програма буде завантажена в цю папку.
      </summary>
      <example>
        <text>
          Даний приклад вказує компілятору, що програма має бути завантажена на SD карту і для неї потрібно створити папка "MyProject".
        </text>
        <code>
          folder "sd" "MyProject"
        </code>
      </example>
    </member>
    <member name="K:For">
      <summary>
        Оператор для створення циклів типу For c заданою кількістю ітерацій
      </summary>
      <example>
        <text>
          Даний приклад виводить на екран EV3 числа від 1 до 10 з паузою в 0.5 секунд
        </text>
        <code>
          For i = 1 To 10
          LCD.Clear()
          LCD.Text(1, 0, 0, 1, i)
          LCD.Update()
          Program.Delay(500)
          EndFor
        </code>
      </example>
    </member>
    <member name="K:EndFor">
      <summary>
        Ключове слово, яке закриває конструкцію For
      </summary>
    </member>
    <member name="K:To">
      <summary>
        Ключове слово, яке визначає кінцеве значення лічильника для циклу For.
      </summary>
    </member>
    <member name="K:Step">
      <summary>
        Ключове слово, яке визначає крок зміни значень для циклу For.
      </summary>
      <example>
        <text>
          Даний приклад виводить на екран непарні числа від 1 до 10
        </text>
        <code>
          For i = 1 to 10 Step 2
          LCD.Clear()
          LCD.Text(1, 0, 0, 1, i)
          LCD.Update()
          Program.Delay(500)
          EndFor
        </code>
      </example>
    </member>
    <member name="K:If">
      <summary>
        Конструкція If дозволяє задати одну або кілька умов, при яких виконуються різні дії. Умови можна комбінувати за допомогою операторів And і Or.
      </summary>
      <example>
        <text>
          Даний приклад виводить на екран в залежності від значення змінної (за замовчуванням задана "Решка") фрази "Я виграв!" або "Я програв.".
        </text>
        <code>
          If flip = "Tail" Then
          LCD.Text(1, 0, 0, 1, "Win")
          Else
          LCD.Text(1, 0, 0, 1, "Lose")
          EndIf
          LCD.Update()
          Program.Delay(3000)
        </code>
      </example>
    </member>
    <member name="K:Then">
      <summary>
        Ключове слово, наступне після умови (або декількох умов) конструкції If
      </summary>
    </member>
    <member name="K:Else">
      <summary>
        Використовується для визначення дій в разі, коли основну умову If не виконано.
      </summary>
    </member>
    <member name="K:ElseIf">
      <summary>
        Ключове слово ElseIf дозволяє визначити альтернативну дію для оператора If.
      </summary>
      <example>
        <text>
          Даний приклад виводить на екран вітання, залежне від часу доби (змінна hours).
        </text>
        <code>
          hours = 18
          LCD.Clear()
          If hours &lt; 12 Then
          LCD.Text(1, 0, 0, 1, "AM")
          ElseIf hours > 13 Then
          LCD.Text(1, 0, 0, 1, "PM")
          EndIf
          LCD.Update()
          Program.Delay(3000)
        </code>
      </example>
    </member>
    <member name="K:EndIf">
      <summary>
        Ключове слово, що закриває конструкцію If
      </summary>
    </member>
    <member name="K:Goto">
      <summary>
        Оператор Goto дозволяє здійснити миттєвий перехід до будь-якої точки програми.
      </summary>
      <example>
        <text>
          Даний приклад виводить на екран послідовні числа в нескінченному циклі
        </text>
        <code>
          i = 0
          start:
          i = i + 1
          LCD.Text(1, 0, 0, 1, i)
          LCD.Update()
          Program.Delay(500)
          LCD.Clear()
          Goto start
        </code>
      </example>
    </member>
    <member name="K:Function">
      <summary>
        Функция. 
      </summary>
      <example>
        <text>
          Данный пример содержит функцию, которая выводит на экран текст "OMG!".
        </text>
        <code>
          WriteToScreen(2, "OMG!")
          Program.Delay(5000)

          Function WriteToScreen (in number fontSize, in string message)
          LCD.Clear()
          LCD.Text(1, 0, 0, fontSize, message)
          LCD.Update()
          EndFunction
        </code>
      </example>
    </member>
    <member name="K:EndFunction">
      <summary>
        Оператор завершения функции.
      </summary>
    </member>
    <member name="K:private">
      <summary>
        Команда використовується тільки в файлах модулів (.bmp). Вона пишеться в окремому рядку, при цьому в даному рядку не повинно бути ніякого іншого коду. Команда може оголошуватися в модулі тільки одноразово. Весь код після команди private (методи і властивості модуля) вважається закритим для інших частин програми і є доступним тільки для даного модуля. Виклик private методів і властивостей модуля в інших частинах програми призведе до помилки. Відповідно, весь інший код (методи та властивості), розташований до команди private, може бути викликаний з будь-якої частини програми.
      </summary>
    </member>
    <member name="K:Sub">
      <summary>
        Підпрограми (від англ. "Subroutine" - підпрограма) дозволяють пакувати фрагменти коду в зручні контейнери, що є особливо зручним при багаторазовому повторенні однієї і тієї ж послідовності дій.
      </summary>
      <example>
        <text>
          Даний приклад містить підпрограму, яка виводить на екран текст "OMG!".
        </text>
        <code>
          Sub Hello
          LCD.Clear()
          LCD.Text(1, 0, 0, 1, "OMG!")
          LCD.Update()
          EndSub
          Hello()
          Program.Delay(5000)
        </code>
      </example>
    </member>
    <member name="K:EndSub">
      <summary>
        Оператор завершення підпрограми.
      </summary>
    </member>
    <member name="K:While">
      <summary>
        Оператор для створення циклів типу While c завершенням по певній умові.
      </summary>
      <example>
        <text>
          Даний приклад виводить на екран набір випадкових чисел до тих пір, поки не випаде число більше 100
        </text>
        <code>
          i=1
          While i &lt; 100
          i = Math.GetRandomNumber(150)
          LCD.Text(1, 0, 0, 1, i)
          LCD.Update()
          Program.Delay(500)
          LCD.Clear()
          EndWhile
          LCD.Text(1, 0, 0, 1, i)
          LCD.Update()
          Program.Delay(3000)
        </code>
      </example>
    </member>
    <member name="K:EndWhile">
      <summary>
        Ключове слово, яке завершує конструкцію While.
      </summary>
    </member>
    <member name="K:And">
      <summary>
        Обчислює логічний вираз і повертає значення True (Істина), якщо обидва аргументи мають значення True (Істина).
      </summary>
    </member>
    <member name="K:Or">
      <summary>
        Обчислює логічний вираз і повертає значення True (Істина), якщо один з аргументів має значення True (Істина).
      </summary>
    </member>
    <member name="K:in">
      <summary>
        Застосовується тільки з ключовим словом Function. Вказує на те, що змінна використовується як вхідний параметр. Після слова in повинен бути тип змінної (number, number [], string, string []), потім ім'я змінної.
      </summary>
    </member>
    <member name="K:out">
      <summary>
        Застосовується тільки з ключовим словом Function. Вказує на те, що змінна використовується як вихідний параметр. Після слова out повинен бути тип змінної (number, number [], string, string []), потім ім'я змінної.
      </summary>
    </member>
    <member name="K:number">
      <summary>
        Застосовується тільки з ключовим словом Function. Вказує на те, що змінна буде зберігати число. Якщо використовувати з [] (number []), тоді змінна буде зберігати числовий масив.
      </summary>
    </member>
    <member name="K:string">
      <summary>
        Застосовується тільки з ключовим словом Function. Вказує на те, що змінна буде зберігати рядок. Якщо використовувати з [] (string []), тоді змінна буде зберігати масив рядків.
      </summary>
    </member>
  </members>
</doc>