<?xml version="1.0"?>
<doc>
  <members>
    <member name="T:Sensor">
      <summary>
        Команди для роботи з датчиками, підключеними до EV3. Номера портів вказуються наступним чином:
        1-4 локальні датчики
        5-8 другий блок EV3 в USB-ланцюгу
        9-12 третій блок EV3 в USB-ланцюгу
      </summary>
    </member>
    <member name="M:GetName">
      <summary>
        Отримати ім'я датчика, підключеного до зазначеного порту.
      </summary>
      <param name="port">Номер порту датчика</param>
      <returns>Назва датчика (наприклад "TOUCH")</returns>
    </member>
    <member name="M:GetType">
      <summary>
        Отримати цифровий ідентифікатор датчика, підключеного до зазначеного порту.
      </summary>
      <param name="port">Номер порту датчика</param>
      <returns>Цифровий ідентифікатор датчика (наприклад "16" для датчика натискання)</returns>
    </member>
    <member name="M:GetMode">
      <summary>
        Отримати поточний режим роботи датчика, підключеного до зазначеного порту.
      </summary>
      <param name="port">Номер порту датчика</param>
      <returns>Поточний режим роботи датчика ("0", якщо виставлений режим за замовчуванням)</returns>
    </member>
    <member name="M:SetMode">
      <summary>
        Задає режим роботи датчика, який підключено до вказаного порту. Команда не передає управління програмі до тих пір, поки процес переходу на новий режим не завершиться. Обраний режим залишається актуальним навіть після завершення роботи основної програми. Нижче наведені основні режими роботи датчиків: номер режиму для команди SetMode, назва режиму та кількість значень, що повертаються (в дужках).

        Режими датчика торкання EV3:
        0 - стан ( 1 )
        1 - кількість відпускань ( 1 )

        Режими датчика кольору EV3:
        0 - яскравість відбитого світла ( 1 )
        1 - яскравість зовнішнього освітлення ( 1 )
        2 - номер кольору LEGO ( 1 )
        3 - необроблені значення відбитого світла ( 2 )
        4 - режим RGB ( 3 )

        Режими гіроскопа EV3:
        0 - кут ( 1 )
        1 - швидкість 0-499 град/сек ( 1 )
        2 - велика швидкість без температурної компенсації 0-2000 град/сек ( 1 )
        3 - кут і швидкість ( 2 )

        Режими інфрачервоного датчика EV3:
        0 - наближення ( 1 )
        1 - маяк ( 8 )
        2 - дистанційний пульт керування ( 4 )

        Режими ультразвукового датчика EV3:
        0 - відстань з точністю 0.1 сантиметра безперервно ( 1 )
        1 - відстань з точністю 0.1 дюйма безперервно ( 1 )
        2 - виявлення присутності ( 1 )
        3 - відстань з точністю 0.1 сантиметра, включення тільки в момент виміру ( 1 )
        4 - відстань з точністю 0.1 дюйма, включення тільки в момент виміру ( 1 )

        Режими датчика торкання NXT:
        0 - стан ( 1 )
        1 - кількість відпускань ( 1 )

        Режим роботи датчика світла NXT:
        0 - яскравість відбитого світла ( 1 )
        1 - яскравість зовнішнього освітлення ( 1 )

        Режими ультразвукового датчика NXT:
        0 - відстань у сантиметрах ( 1 )
        1 - відстань у дюймах ( 1 )

        Режими датчика звуку NXT:
        0 - вимір dB ( 1 )
        1 - вимір dBа ( 1 )

        Режими датчика температури NXT:
        0 - температура за Цельсієм ( 1 )
        1 - температура за Фаренгейтом ( 1 )

        Режими роботи лічильника електроенергії NXT:
        0 - напруга на вході ( 1 )
        1 - струм на вході ( 1 )
        2 - напруга на виході ( 1 )
        3 - струм на виході ( 1 )
        4 - джоуль ( 1 )
        5 - потужність на вході ( 1 )
        6 - потужність на виході ( 1 )
        7 - всі виміри ( 7 )
        
        Режими роботи датчика кольору HiTecnicV2:
        0 - номер кольору LEGO 0-16 ( 1 )
        1 - значення Red 0-255 ( 1 )
        2 - значення Green 0-255 ( 1 )
        3 - значення Blue 0-255 ( 1 )
        4 - значення White 0-255 ( 1 )
        5 - оброблені значення RGB 0-255 ( 3 )
      </summary>
      <param name="port">Номер порту датчика</param>
      <param name="mode">Номер режиму датчика</param>
    </member>
    <member name="M:IsBusy">
      <summary>
        Перевірити, чи не знаходиться датчик в процесі ініціалізації або зміни режиму. Під час перемикання режимів датчик деякий час є недоступним, що може викликати помилки в читанні даних.
      </summary>
      <param name="port">Номер порту датчика</param>
      <returns>"True" якщо датчик недоступний</returns>
    </member>
    <member name="M:Wait">
      <summary>
        Дочекатися, поки датчик ініціалізується або переключиться в новий режим.
      </summary>
      <param name="port">Номер порту датчика</param>
    </member>
    <member name="M:ReadPercent">
      <summary>
        Отримати поточне значення датчика з автоматичною конвертацією у відсотки. Деякі датчики не підтримують дану команду - в цьому випадку рекомендується використання команди ReadRaw.
      </summary>
      <param name="port">Номер порту датчика</param>
      <returns>Поточне показання датчика (діапазон показань: 0 - 100)</returns>
    </member>
    <member name="M:ReadRaw">
      <summary>
        Отримати поточне значення датчика в необробленому вигляді (RAW-дані). Діапазон значень, що повертаються (це може бути як одне, так і відразу кілька значень у вигляді масиву) залежить від типу і режиму роботи датчика.
      </summary>
      <param name="port">Номер порту датчика</param>
      <param name="values">Розмір масиву, який повертається з показами</param>
      <returns>Масив з показаннями датчика з необхідним числом елементів. Масив починається з елемента, що має індекс "0". Якщо дані не отримані, то до відповідного елемент масиву буде записаний нуль</returns>
    </member>
    <member name="M:ReadRawValue">
      <summary>
        Аналог ReadRaw, проте повертається тільки одне необроблене показання з датчика.
      </summary>
      <param name="port">Номер порту датчика</param>
      <param name="index">Індекс елемента масиву з показами, значення якого потрібно читати</param>
      <returns>Значення зазначеного елемента масиву з показаннями датчика</returns>
    </member>
    <member name="M:CommunicateI2C">
      <summary>
        Взаємодія з зовнішнім пристроєм по протоколу I2C, підключеному до одного з портів датчиків. Ця команда може посилати і приймати кілька байт по шині I2C, з її допомогою можна працювати з датчиками сторонніх виробників, що використовують цей протокол обміну або, наприклад, з Arduino. Зверніть увагу, команда працює в межах одного блоку EV3 і тільки з підпорядкованими (slave) I2C-пристроями.
      </summary>
      <param name="port">Номер порту датчика</param>
      <param name="address">Адреса (0 - 127) підпорядкованого I2C пристрою на шині I2C</param>
      <param name="writebytes">Кількість байт для відправки I2C-пристрою (максимум 31)</param>
      <param name="readbytes">Кількість байт для прийому з I2C-пристрої (максимум 32, мінімум 1)</param>
      <param name="writedata">Масив, що містить байти для відправки (індекс першого елемента дорівнює 0)</param>
      <returns>Масив, що містить запитану кількість прийнятих байт з I2C-пристрої (початковий індекс дорівнює 0)</returns>
    </member>
    <member name="M:ReadI2CRegister">
      <summary>
        Ця команда звертається до одного пристрою на шині I2C і намагається отримати значення одного регістра підпорядкованого I2C-пристрою.
      </summary>
      <param name="port">Номер порту датчика</param>
      <param name="address">Адреса (0 - 127) підпорядкованого I2C пристрою на шині I2C</param>
      <param name="registernumber">Номер регістру на підпорядкованому пристрої для читання даних</param>
      <returns>Дані в регістрі</returns>
    </member>
    <member name="M:ReadI2CRegisters">
      <summary>
        Ця команда звертається до одного пристрою на шині I2C і намагається отримати значення декількох регістрів підпорядкованого I2C-пристрою.
      </summary>
      <param name="port">Номер порту датчика</param>
      <param name="address">Адреса (0 - 127) підпорядкованого I2C пристрою на шині I2C</param>
      <param name="registernumber">Номер першого регістру на підпорядкованому пристрої для читання даних</param>
      <param name="readbytes">Кількість регістрів для читання (максимум 32)</param>
      <returns>Масив, що містить запитані значення (початковий індекс дорівнює 0)</returns>
    </member>
    <member name="M:WriteI2CRegister">
      <summary>
        Ця команда звертається до одного пристрою на шині I2C і намагається перезаписати значення одного регістра підпорядкованого I2C-пристрою.
      </summary>
      <param name="port">Номер порту датчика</param>
      <param name="address">Адреса (0 - 127) підпорядкованого I2C пристрою на шині I2C</param>
      <param name="registernumber">Регістр на підпорядкованому пристрої, з якого зчитує дані</param>
      <param name="value">Значення, записане в регістр</param>
    </member>
    <member name="M:WriteI2CRegisters">
      <summary>
        Ця команда звертається до одного пристрою на шині I2C і намагається перезаписати значення декількох регістрів підпорядкованого I2C-пристрою.
      </summary>
      <param name="port">Номер порту датчика</param>
      <param name="address">Адреса (0 - 127) підпорядкованого I2C пристрою на шині I2C</param>
      <param name="registernumber">Номер першого регістра на підпорядкованому пристрої для запису даних</param>
      <param name="writebytes">Кількість регістрів для запису (максимум 30)</param>
      <param name="writedata">Масив, що містить байти для запису (початковий індекс дорівнює 0)</param>
    </member>
    <member name="M:SendUARTData">
      <summary>
        Посилає дані по протоколу UART пристрою, підключеному до порту датчика.
        Функція корисна для спілкування з саморобними датчиками і виконавчими пристроями.
      </summary>
      <param name="port">Номер порту датчика</param>
      <param name="writebytes">Кількість байт для відправки на пристрій (максимум 32)</param>
      <param name="writedata">Масив, що містить байти для відправки по UART (початковий індекс дорівнює 0)</param>
    </member>
  </members>
</doc>