<?xml version="1.0"?>
<doc>
  <members>
    <member name="W:Keywords">
      <summary>
        Зарезервированные слова, используемые языком для специальных целей.
      </summary>
    </member>
    <member name="K:include">
      <summary>
        Включение в программу других файлов в формате (.bpi). Данная опция позволяет разгрузить основной код за счет разбиения большой программы на отдельные файлы. Имена включаемых файлов указывается без расширения, путь указывается относительно папки с программой. Команда include может быть использована только в основной программе. Использование команды в файлах включений (.bpi) и модулей (.bpm) вызовет ошибку. В исполняемой программе (.bp) файлы включений можно указывать в любом месте. В итоге код из файла включения будет вставлен в исполняемую программу в место объявления команды include.
      </summary>
      <example>
        <text>
          Пример подключает к исполняемой программе файл с именем "MyInclude.bpi".
        </text>
        <code>
          include "MyInclude"
        </code>
      </example>
    </member>
    <member name="K:import">
      <summary>
        Импортирует в программу другие файлы в формате (.bpm). Имена импортируемых файлов указывается без расширения, путь указывается относительно папки с программой. Команда import может быть использована в любых файлах (в исполняемой программе, в файлах включений, в файлах самих модулей). В файлах модулей допустимо размещать только код функций (методов модуля), переменные (свойства модуля), команды импорта других модулей. В исходную программу попадает код только тех методов и свойств модулей, которые были вызваны непосредственно в коде программы. Подробнее с модулями и правилами их описания можно познакомиться в папке с примерами.
      </summary>
      <example>
        <text>
          Пример подключает к исполняемой программе файл с именем "MyModule.bpm".
        </text>
        <code>
          import "MyModule"
        </code>
      </example>
    </member>
    <member name="K:folder">
      <summary>
        Состоит из ключевого слова и двух ключей. Первый ключ указывает куда будет загружаться программа: "sd" - на SD карту, "prjs" - в память блока. Второй ключ указывает на имя папки для проекта, эта папка будет создана при загрузке программы в блок. Программа будет загружена в созданную папку.
      </summary>
      <example>
        <text>
          Данный пример указывает компилятору, что программа будет загружена на SD карту и для неё нужно создать папку с именем "MyProject".
        </text>
        <code>
          folder "sd" "MyProject"
        </code>
      </example>
    </member>
    <member name="K:For">
      <summary>
        Оператор для создания циклов типа For c заданным количеством итераций
      </summary>
      <example>
        <text>
          Данный пример выводит на экран EV3 числа от 1 до 10 с паузой в 0.5 секунд
        </text>
        <code>
          For i = 1 To 10
          LCD.Clear()
          LCD.Text(1, 0, 0, 1, i)
          LCD.Update()
          Program.Delay(500)
          EndFor
        </code>
      </example>
    </member>
    <member name="K:EndFor">
      <summary>
        Ключевое слово, закрывающее конструкцию For
      </summary>
    </member>
    <member name="K:To">
      <summary>
        Ключевое слово, определяющее конечное значение счетчика для цикла For.
      </summary>
    </member>
    <member name="K:Step">
      <summary>
        Ключевое слово, определяющее шаг изменения значений для цикла For.
      </summary>
      <example>
        <text>
          Данный пример выводит на экран нечётные числа от 1 до 10
        </text>
        <code>
          For i = 1 to 10 Step 2
          LCD.Clear()
          LCD.Text(1, 0, 0, 1, i)
          LCD.Update()
          Program.Delay(500)
          EndFor
        </code>
      </example>
    </member>
    <member name="K:If">
      <summary>
        Конструкция If позволяет задать одно или несколько условий, при котором выполняются различные действия. Условия могут комбинироваться через операторы And и Or.
      </summary>
      <example>
        <text>
          Данный пример выводит на экран в зависимости от значения переменной (по умолчанию задана "Решка") фразы "Ура! Я выиграл!" или "Печаль...".
        </text>
        <code>
          one = "One"
          two = "Two"
          LCD.Clear()
          If one = "One" Or two = "Two" Then
          LCD.Text(1, 0, 0, 1, "Yahoo!")
          Else
          LCD.Text(1, 0, 0, 1, "Oh, well...")
          EndIf
          LCD.Update()
          Program.Delay(3000)
        </code>
      </example>
    </member>
    <member name="K:Then">
      <summary>
        Ключевое слово, следующее после условия (либо нескольких условий) конструкции If
      </summary>
    </member>
    <member name="K:Else">
      <summary>
        Используется для определения действий в случае, когда основное условие If не выполнено.
      </summary>
    </member>
    <member name="K:ElseIf">
      <summary>
        Ключевое слово ElseIf позволяет определить альтернативное действие для оператора If.
      </summary>
      <example>
        <text>
          Данный пример выводит на экран приветствие, зависящее от времени суток (переменная clock).
        </text>
        <code>
          hours = 18
          LCD.Clear()
          If hours &lt; 12 Then
          LCD.Text(1, 0, 0, 1, "AM")
          ElseIf hours > 13 Then
          LCD.Text(1, 0, 0, 1, "PM")
          EndIf
          LCD.Update()
          Program.Delay(3000)
        </code>
      </example>
    </member>
    <member name="K:EndIf">
      <summary>
        Ключевое слово, закрывающее конструкцию If
      </summary>
    </member>
    <member name="K:Goto">
      <summary>
        Оператор Goto позволяет осуществить мгновенный переход в любую точку программы.
      </summary>
      <example>
        <text>
          Данный пример выводит на экран последовательные числа в бесконечном цикле
        </text>
        <code>
          i = 0
          start:
          i = i + 1
          LCD.Text(1, 0, 0, 1, i)
          LCD.Update()
          Program.Delay(500)
          LCD.Clear()
          Goto start
        </code>
      </example>
    </member>
    <member name="K:Function">
      <summary>
        Функция. 
      </summary>
      <example>
        <text>
          Данный пример содержит функцию, которая выводит на экран текст "OMG!".
        </text>
        <code>
          WriteToScreen(2, "OMG!")
          Program.Delay(5000)

          Function WriteToScreen (in number fontSize, in string message)
          LCD.Clear()
          LCD.Text(1, 0, 0, fontSize, message)
          LCD.Update()
          EndFunction
        </code>
      </example>
    </member>
    <member name="K:EndFunction">
      <summary>
        Оператор завершения функции.
      </summary>
    </member>
    <member name="K:private">
      <summary>
        Команда используется только в файлах модулей (.bmp). Пишется в отдельной строке, при этом ни какого другого кода в этой строке не должно быть. Команда может объявляться в модуле только один раз, весь следующий за командой private код (методы и свойства модуля) считается закрытым для других частей программы и доступен только данному модулю. Вызов private методов и свойств модуля в других частях программы приведет к ошибке. Соответственно весь код (методы и свойства), расположенный до команды private, доступен к вызову из любой части программы.
      </summary>
    </member>
    <member name="K:Sub">
      <summary>
        Подпрограммы (от англ. "subroutine" - подпрограмма) позволяют паковать фрагменты кода в удобные контейнеры - что особенно удобно при многократном повторении одной и той же последовательности действий. 
      </summary>
      <example>
        <text>
          Данный пример содержит подпрограмму, которая выводит на экран текст "OMG!".
        </text>
        <code>
          sub hello
          LCD.Clear()
          LCD.Text(1, 0, 0, 1, "OMG!")
          LCD.Update()
          EndSub
          hello()
          Program.Delay(5000)
        </code>
      </example>
    </member>
    <member name="K:EndSub">
      <summary>
        Оператор завершения подпрограммы.
      </summary>
    </member>
    <member name="K:While">
      <summary>
        Оператор для создания циклов типа While c завершением по определенному условию.
      </summary>
      <example>
        <text>
          Данный пример выводит на экран набор случайных чисел до тех пор, пока не выпадет число больше 100
        </text>
        <code>
          i=1
          While i &lt; 100
          i = Math.GetRandomNumber(150)
          LCD.Text(1, 0, 0, 1, i)
          LCD.Update()
          Program.Delay(500)
          LCD.Clear()
          EndWhile
          LCD.Text(1, 0, 0, 1, i)
          Program.Delay(3000)
        </code>
      </example>
    </member>
    <member name="K:EndWhile">
      <summary>
        Ключевое слово, завершающее конструкцию While.
      </summary>
    </member>
    <member name="K:And">
      <summary>
        Вычисляет логическое выражение и возвращает значение True (Истина), если оба аргумента имеют значение True (Истина).
      </summary>
    </member>
    <member name="K:Or">
      <summary>
        Вычисляет логическое выражение и возвращает значение True (Истина), если один из аргументов имеет значение True (Истина).
      </summary>
    </member>
    <member name="K:in">
      <summary>
        Применяется только с ключевым словом Function. Указывает на то, что переменная используется как входной параметр. После слова in должен быть тип переменной (number, number[], string, string[]), затем имя переменной.
      </summary>
    </member>
    <member name="K:out">
      <summary>
        Применяется только с ключевым словом Function. Указывает на то, что переменная используется как выходной параметр. После слова out должен быть тип переменной (number, number[], string, string[]), затем имя переменной.
      </summary>
    </member>
    <member name="K:number">
      <summary>
        Применяется только с ключевым словом Function. Указывает на то, что переменная будет хранить число. Если использовать с [] (number[]), тогда переменная будет хранить числовой массив.
      </summary>
    </member>
    <member name="K:string">
      <summary>
        Применяется только с ключевым словом Function. Указывает на то, что переменная будет хранить строку. Если использовать с [] (string[]), тогда переменная будет хранить массив строк.
      </summary>
    </member>   
  </members>
</doc>