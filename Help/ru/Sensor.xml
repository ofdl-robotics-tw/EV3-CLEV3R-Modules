<?xml version="1.0"?>
<doc>
  <members>
    <member name="T:Sensor">
      <summary>
        Команды для работы с датчиками, подключенными к EV3. Номера портов указываются следующим образом:
        1-4  локальные датчики,
        5-8  второй блок EV3 в USB-цепи,
        9-12 третий блок EV3 в USB-цепи.
      </summary>
    </member>
    <member name="M:GetName">
      <summary>
        Запросить имя датчика, подключенного к указанному порту.
      </summary>
      <param name="port">Номер порта датчика</param>
      <returns>Название датчика (например "TOUCH")</returns>
    </member>
    <member name="M:GetType">
      <summary>
        Запросить цифровой идентификатор датчика, подключенного к указанному порту.
      </summary>
      <param name="port">Номер порта датчика</param>
      <returns>Цифровой идентификатор датчика (например "16" для датчика нажатия)</returns>
    </member>
    <member name="M:GetMode">
      <summary>
        Запросить текущий режим работы датчика, подключенного к указанному порту.
      </summary>
      <param name="port">Номер порта датчика</param>
      <returns>Текущий режим работы датчика ("0", если выставлен режим по умолчанию)</returns>
    </member>
    <member name="M:SetMode">
      <summary>
        Задаёт режим работы датчика, подключенного к указанному порту. Команда не передает управление программе до тех пор, пока процесс переключения в новый режим не будет завершен. Выбранный режим актуален даже после завершения работы основной программы. Ниже представлены основные режимы работы датчиков - номер режима для команды SetMode, название режима, количество возвращаемых значений в скобках.

        Режимы датчика касания EV3:
        0 - состояние ( 1 )
        1 - количество отпусканий ( 1 )

        Режимы датчика цвета EV3:
        0 - яркость отраженного света ( 1 )
        1 - яркость внешнего освещения ( 1 )
        2 - номер цвета LEGO ( 1 )
        3 - необработанные значения отраженного света ( 2 )
        4 - режим RGB ( 3 )

        Режимы гироскопа EV3:
        0 - угол ( 1 )
        1 - скорость 0-499 град/сек ( 1 )
        2 - скорость быстрая без температурной компенсации 0-2000 град/сек ( 1 )
        3 - угол и скорость ( 2 )

        Режимы инфракрасного датчика EV3:
        0 - приближение ( 1 )
        1 - маяк ( 8 )
        2 - дистанционный пульт управления ( 4 )

        Режимы ультразвукового датчика EV3:
        0 - расстояние с точностью 0.1 сантиметра непрерывно ( 1 )
        1 - расстояние с точностью 0.1 дюйма непрерывно ( 1 )
        2 - обнаружение присутствия ( 1 )
        3 - расстояние с точностью 0.1 сантиметра, включение только в момент замера ( 1 )
        4 - расстояние с точностью 0.1 дюйма, включение только в момент замера ( 1 )

        Режимы датчика касания NXT:
        0 - состояние ( 1 )
        1 - количество отпусканий ( 1 )

        Режим работы датчика света NXT:
        0 - яркость отраженного света ( 1 )
        1 - яркость внешнего освещения ( 1 )

        Режимы ультразвукового датчика NXT:
        0 - расстояние в сантиметрах ( 1 )
        1 - расстояние в дюймах ( 1 )

        Режимы датчика звука NXT:
        0 - измерение dB ( 1 )
        1 - измерение dBa ( 1 )

        Режимы датчика температуры NXT:
        0 - температура по цельсию ( 1 )
        1 - температура по фарингейту ( 1 )

        Режимы работы счетчика электроэнергии NXT:
        0 - напряжение на входе ( 1 )
        1 - ток на входе ( 1 )
        2 - напряжение на выходе ( 1 )
        3 - ток на выходе ( 1 )
        4 - джоуль ( 1 )
        5 - мощность на входе ( 1 )
        6 - мощность на выходе ( 1 )
        7 - все измерения ( 7 )
        
        Режимы работы датчика цвета HiTecnicV2:
        0 - номер цвета LEGO 0-16 ( 1 )
        1 - значение Red 0-255 ( 1 )
        2 - значение Green 0-255 ( 1 )
        3 - значение Blue 0-255 ( 1 )
        4 - значение White 0-255 ( 1 )
        5 - обработанные значения RGB 0-255 ( 3 )
      </summary>
      <param name="port">Номер порта датчика</param>
      <param name="mode">Номер режима датчика</param>
    </member>
    <member name="M:IsBusy">
      <summary>
        Проверить, не находится ли датчик в процессе инициализации или смены режима. Во время переключения режимов датчик некоторое время недоступен, что может вызвать ошибки в чтении данных.
      </summary>
      <param name="port">Номер порта датчика</param>
      <returns>"True" если датчик не доступен</returns>
    </member>
    <member name="M:Wait">
      <summary>
        Дождаться, пока датчик инициализируется или переключится в новый режим.
      </summary>
      <param name="port">Номер порта датчика</param>
    </member>
    <member name="M:ReadPercent">
      <summary>
        Получить текущее показание датчика с автоматической конвертацией в проценты. Некоторые датчики на поддерживают данную команду - в этом случае рекомендуется использование команды ReadRaw.
      </summary>
      <param name="port">Номер порта датчика</param>
      <returns>Текущее показание датчика (диапазон показаний: 0 - 100)</returns>
    </member>
    <member name="M:ReadRaw">
      <summary>
        Получить текущее показание датчика в необработанном виде (RAW-данные). Диапазон возвращаемых значений (это может быть как одно, так и сразу несколько значений в виде массива) зависит от типа и режима работы датчика.
      </summary>
      <param name="port">Номер порта датчика</param>
      <param name="values">Размер возвращаемого массива с показаниями</param>
      <returns>Массив с показаниями датчика с требуемым числом элементов. Массив начинается с элемента, имеющего индекс "0". Если данные не получены, то в соотвествующий элемент массива будет запиан ноль</returns>
    </member>
    <member name="M:ReadRawValue">
      <summary>
        Аналог ReadRaw, однако возвращается только одно необработанное показание с датчика.
      </summary>
      <param name="port">Номер порта датчика</param>
      <param name="index">Индекс элемента массива с показаниями, значение которого нужно считать</param>
      <returns>Значение указанного элемента массива с показаниями датчика</returns>
    </member>
    <member name="M:CommunicateI2C">
      <summary>
        Взаимодействие с внешним устройством по протоколу I2C, подключенному к одному из портов датчиков. Эта команда может посылать и принимать несколько байт по шине I2C, с ее помошью можно работать с датчиками сторонних производителей, использующих этот протокол обмена или, например, с Arduino. Обратите внимание, команда работает в пределах одного блока EV3 и только с подчиненными (slave) I2C-устройствами.
      </summary>
      <param name="port">Номер порта датчика</param>
      <param name="address">Адрес (0 - 127) подчиненного I2C устройства на шине I2C</param>
      <param name="writebytes">Количество байт для отправки I2C-устройству (максимум 31).</param>
      <param name="readbytes">Количество байт для приема с I2C-устройства (максимум 32, минимум 1)</param>
      <param name="writedata">Массив, содержащий байты для отправки (индекс первого элемента равен 0)</param>
      <returns>Массив, содержащий запрошенное количество принятых байт с I2C-устройства (начальный индекс равен 0)</returns>
    </member>
    <member name="M:ReadI2CRegister">
      <summary>
        Данная команда обращается к одному устройству на шине I2C и пытается получить значение одного регистра подчиненного I2C-устройства.
      </summary>
      <param name="port">Номер порта датчика</param>
      <param name="address">Адрес (0 - 127) подчиненного I2C-устройства на шине I2C</param>
      <param name="registernumber">Номер регистра на подчиненном устройстве для чтения данных</param>
      <returns>Данные в регистре</returns>
    </member>
    <member name="M:ReadI2CRegisters">
      <summary>
        Данная команда обращается к одному устройству на шине I2C и пытается получить значение нескольких регистров подчиненного I2C-устройства .
      </summary>
      <param name="port">Номер порта датчика</param>
      <param name="address">Адрес (0 - 127) подчиненного I2C устройства на шине I2C</param>
      <param name="registernumber">Номер первого регистра на подчиненном устройстве для чтения данных</param>
      <param name="readbytes">Количество регистров для чтения (максимум 32).</param>
      <returns>Массив, содержащий запрошенные значения (начальный индекс равен 0)</returns>
    </member>
    <member name="M:WriteI2CRegister">
      <summary>
        Данная команда обращается к одному устройству на шине I2C и пытается перезаписать значение одного регистра подчиненного I2C-устройства.
      </summary>
      <param name="port">Номер порта датчика</param>
      <param name="address">Адрес (0 - 127) подчиненного I2C-устройства на шине I2C</param>
      <param name="registernumber">Регистр на подчиненном устройстве, с которого считываюся данные</param>
      <param name="value">Значение, записанное в регистр</param>
    </member>
    <member name="M:WriteI2CRegisters">
      <summary>
        Данная команда обращается к одному устройству на шине I2C и пытается перезаписать значение нескольких регистров подчиненного I2C-устройства.
      </summary>
      <param name="port">Номер порта датчика</param>
      <param name="address">Адрес (0 - 127) подчиненного I2C устройства на шине I2C</param>
      <param name="registernumber">Номер первого регистра на подчиненном устройстве для записи данных</param>
      <param name="writebytes">Количество регистров для записи (максимум 30)</param>
      <param name="writedata">Массив, содержащий байты для записи (начальный индекс равен 0)</param>
    </member>
    <member name="M:SendUARTData">
      <summary>
        Посылает данные по протоколу UART устройству, подключенному к порту датчика.
        Функция полезна для общения с самодельными датчиками и исполнительными устройствами.
      </summary>
      <param name="port">Номер порта датчика</param>
      <param name="writebytes">Количество байт для отправки на устройство (максимум 32).</param>
      <param name="writedata">Массив, содержащий байты для отправки по UART (начальный индекс равен 0)</param>
    </member>
  </members>
</doc>