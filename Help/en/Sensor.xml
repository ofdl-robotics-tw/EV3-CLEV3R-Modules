<?xml version="1.0"?>
<doc>
  <members>
    <member name="T:Sensor">
      <summary>
        Access sensors that are attached to the brick.
        To specify the sensor use the port number which is printed below the socket on the brick (for example 1).
        To access sensors of further bricks that are connected via daisy-chaining, use the next higher numbers instead (5 - 8 will access the sensors on the first daisy-chained brick, 9-12 the sensors on the next one and so on).
      </summary>
    </member>
    <member name="M:GetName">
      <summary>
        Get the name and mode of a currently connected sensor. 
        This function is mainly intended for diagnostic use because you normally know which sensor is plugged to which port on the model.
      </summary>
      <param name="port">Number of the sensor port</param>
      <returns>Description text (for example, "TOUCH")</returns>
    </member>
    <member name="M:GetType">
      <summary>
        Get the numerical type identifier of a currently connected sensor.
      </summary>
      <param name="port">Number of the sensor port</param>
      <returns>Sensor type identifier (for example, 16 for a touch sensor)</returns>
    </member>
    <member name="M:GetMode">
      <summary>
        Get current operation mode of a sensor. 
        Many sensors can work in substantially different modes. For example, the color sensor can detect ambient light, reflected light or color. When the sensor is plugged in it will normally start with mode 0, but that can be changed later by the program.
      </summary>
      <param name="port">Number of the sensor port</param>
      <returns>Current operation mode (0 is always the default mode)</returns>
    </member>
    <member name="M:SetMode">
      <summary>
        The command sets the operating mode of the sensor connected to the specified port. The command does not transfer control to the program until the switching to the new mode is completed. The selected mode will remain active even after the termination of the main program. Below are the sensors’ main operating modes, indicating the mode number for the SetMode command, the mode name, and the number of returned values ​​in brackets.

        EV3 touch sensor operating modes:
        0 - state ( 1 )
        1 - number of releases ( 1 )

        EV3 color sensor operating modes:
        0 - reflected light intensity ( 1 )
        1 - ambient light intensity ( 1 )
        2 - LEGO color number ( 1 )
        3 - raw reflected light values ( 2 )
        4 - RGB mode ( 3 )

        EV3 gyro mode:
        0 - angle ( 1 )
        1 - speed of 0-499 deg./sec. ( 1 )
        2 - high speed without temperature compensation, 0-2,000 deg./sec. ( 1 )
        3 - angle and speed ( 2 )

        EV3 infrared sensor modes:
        0 - approach ( 1 )
        1 - beacon ( 8 )
        2 - remote control board ( 4 )

        EV3 ultrasonic sensor modes:
        0 - continuous distance measurement with an accuracy of 0.1 cm ( 1 )
        1 - continuous distance measurement with an accuracy of 0.1” ( 1 )
        2 - presence detection ( 1 )
        3 - distance measurement with an accuracy of 0.1 cm, only activating in the moment of measurement ( 1 )
        4 - distance measurement with an accuracy of 0.1”, only activating in the moment of measurement ( 1 )

        NXT touch sensor operating modes:
        0 - state ( 1 )
        1 - number of releases ( 1 )

        NXT light sensor operating mode:
        0 - reflected light intensity ( 1 )
        1 - ambient light intensity ( 1 )

        NXT ultrasonic sensor modes:
        0 - distance in centimeters ( 1 )
        1 - distance in inches ( 1 )

        NXT sound sensor operating modes:
        0 - change in dB ( 1 )
        1 - change in dBa ( 1 )

        NXT temperature sensor operating modes:
        0 - temperature Centigrade ( 1 )
        1 - temperature Fahrenheit ( 1 )

        NXT electricity meter operating modes:
        0 - input voltage ( 1 )
        1 - input current ( 1 )
        2 - output voltage ( 1 )
        3 - output current ( 1 )
        4 - joules ( 1 )
        5 - input power ( 1 )
        6 - output power ( 1 )
        7 - all measurements ( 7 )
        
        HiTecnicV2 color sensor operating mode:
        0 - LEGO color number, 0-16 ( 1 )
        1 - Red value, 0-255 ( 1 )
        2 - Green value, 0-255 ( 1 )
        3 - Blue value, 0-255 ( 1 )
        4 - White value, 0-255 ( 1 )
        5 - processed RGB values, 0-255 ( 3 )
      </summary>
      <param name="port">Number of the sensor port</param>
      <param name="mode">New mode to switch to. This only succeeds when the mode is indeed supported by the sensor.</param>
    </member>
    <member name="M:IsBusy">
      <summary>
        Check if a sensor is currently busy switching mode or in process of initialization. After mode switching a sensor may take some time to become ready again.
      </summary>
      <param name="port">Number of the sensor port</param>
      <returns>"True" if the sensor is currently busy</returns>
    </member>
    <member name="M:Wait">
      <summary>
        Wait until a sensor has finished its reconfiguration. When no sensor is plugged into the port, this function returns immediately.
        Normally you would not need to call this command, because SetMode() blocks until the sensor is ready anyway. It can be useful in special circumstances, like when the mode was switched by a different thread, or when a sensor is plugged into the brick at runtime.
      </summary>
      <param name="port">Number of the sensor port</param>
    </member>
    <member name="M:ReadPercent">
      <summary>
        Read the current sensor value and apply some sensible percentage scaling.
        Most sensors can translate the current reading to a meaningful single percentage value like light intensity or button press state.
      </summary>
      <param name="port">Number of the sensor port</param>
      <returns>The percentage value (For example, the touch sensor gives 100 for pressed and 0 for non-pressed)</returns>
    </member>
    <member name="M:ReadRaw">
      <summary>
        Read current sensor value where the result from ReadPercent() is not specific enough.
        Some sensor modes deliver values that cannot be translated to percentage (for example a color index) or that contain multiple values at once (for example the individual red, green, blue light intensities that make up RGB). 
      </summary>
      <param name="port">Number of the sensor port</param>
      <param name="values">Requested size of result array</param>
      <returns>An array holding the requested number of values. Index starts at 0. Elements that got no data are set to 0.</returns>
    </member>
    <member name="M:ReadRawValue">
      <summary>
        Similar to ReadRaw, but returns only a single raw value instead of an array of raw values.
      </summary>
      <param name="port">Number of the sensor port</param>
      <param name="index">Index of the value that should be picked from the result array (starting with index 0)</param>
      <returns>One element of a raw sensor reading</returns>
    </member>
    <member name="M:CommunicateI2C">
      <summary>
        Communicates with devices using the I2C protocol over one of the sensor ports.
        This command addresses one device on the I2C-bus and can send and receive multiple bytes. This feature could be used to attach a custom sensor or to communicate with any device that is capable of being connected to the I2C bus as a slave.
        Note that this command does not work over daisy-chaining.
      </summary>
      <param name="port">Number of the sensor port</param>
      <param name="address">Address (0 - 127) of the I2C slave on the I2C bus</param>
      <param name="writebytes">Number of bytes to write to the slave (maximum 31)</param>
      <param name="readbytes">Number of bytes to request from the slave (maximum 32, minimum 1)</param>
      <param name="writedata">Array holding the data bytes to be sent (starting at 0)</param>
      <returns>An array holding the requested number of values. Index starts at 0</returns>
    </member>
    <member name="M:ReadI2CRegister">
      <summary>
        This command addresses one device on the I2C-bus and tries to receive the value of a single register of a connected I2C slave.
        Note that this command does not work over daisy-chaining.
      </summary>
      <param name="port">Number of the sensor port</param>
      <param name="address">Address (0 - 127) of the I2C slave on the I2C bus</param>
      <param name="registernumber">Number of register in the slave to read data from</param>
      <returns>The content of the register</returns>
    </member>
    <member name="M:ReadI2CRegisters">
      <summary>
        This command addresses one device on the I2C-bus and tries to receive the values of multiple registers of a connected I2C slave.
        Note that this command does not work over daisy-chaining.
      </summary>
      <param name="port">Number of the sensor port</param>
      <param name="address">Address (0 - 127) of the I2C slave on the I2C bus</param>
      <param name="registernumber">Number of the first register in the slave to read data from</param>
      <param name="readbytes">How many register to read (maximum 32)</param>
      <returns>An array holding the requested number of values. Index starts at 0</returns>
    </member>
    <member name="M:WriteI2CRegister">
      <summary>
        This command addresses one device on the I2C-bus and tries to write the value of a single register of a connected I2C slave.
        Note that this command does not work over daisy-chaining.
      </summary>
      <param name="port">Number of the sensor port</param>
      <param name="address">Address (0 - 127) of the I2C slave on the I2C bus</param>
      <param name="registernumber">Number of the register in the slave to write data to</param>
      <param name="value">Value to write into the register.</param>
    </member>
    <member name="M:WriteI2CRegisters">
      <summary>
        This command addresses one device on the I2C-bus and tries to write the values of multiple registers of a connected I2C slave.
        Note that this command does not work over daisy-chaining.
      </summary>
      <param name="port">Number of the sensor port</param>
      <param name="address">Address (0 - 127) of the I2C slave on the I2C bus</param>
      <param name="registernumber">Number of the first register in the slave to write data to</param>
      <param name="writebytes">How many bytes to write into the registers (maximum 30)</param>
      <param name="writedata">Array holding the data bytes to be written (starting at 0)</param>
    </member>
    <member name="M:SendUARTData">
      <summary>
        Sends data to devices which are attached to the UART (universal asynchronous receiver transmitter) of one of the sensor ports. 
        This can be useful to send custom commands to custom made sensors/actuators.
      </summary>
      <param name="port">Number of the sensor port</param>
      <param name="writebytes">Number of bytes to write to the device (maximum 32)</param>
      <param name="writedata">Array holding the data bytes to be sent (starting at 0)</param>
    </member>
  </members>
</doc>
