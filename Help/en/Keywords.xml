<?xml version="1.0"?>
<doc>
  <members>
    <member name="W:Keywords">
      <summary>
        Keywords object is a place holder for providing documentation for Small Basic Keywords
      </summary>
    </member>
    <member name="K:include">
      <summary>
        Includes other .bpi files into the program. This option is used to simplify the main code by splitting a large program into individual files. The names of the included files are indicated without the extension, and the path is indicated in relation to the program folder. The “include” command can only be used in the main program. Using the command in inclusion files (.bpi) and module files (.bpm). In the executed program, inclusion files (.bp) can be indicated in any place. As a result, the code from the inclusion file will be inserted in the executed program into the place of the “include” command declaration.
      </summary>
      <example>
        <text>
          The example includes a file with a name "MyInclude.bpi" into the executed program.
        </text>
        <code>
          include "MyInclude"
        </code>
      </example>
    </member>
    <member name="K:import">
      <summary>
        Imports other .bpm files into the program. The names of the included files are indicated without the extension, and the path is indicated in relation to the program folder. The “import” command can be used in any files (in the executed program, in the inclusion files, or in the module files). In the module files, the code of functions (module methods), variables (module properties), and commands of importing other modules can only be allocated. The source program will only contain the code of those methods and properties of modules that were called directly in the program code. For more details about the modules and rules for their description, refer to the folder with examples.
      </summary>
      <example>
        <text>
          The example imports a file with a name "MyModule.bpm" into the executed program.
        </text>
        <code>
          import "MyModule"
        </code>
      </example>
    </member>
    <member name="K:folder">
      <summary>
        Consists of a keyword and two keys. The first key indicates where to upload the program: "sd" - to the SD card, "prjs" - to the EV3 brick memory. The second key sets the name of the new folder for the project, which will be created when the program is loaded into the EV3 brick. The program will be uploaded to this folder.
      </summary>
      <example>
        <text>
          This example tells the compiler that the program should be uploaded to the SD card and the "MyProject" folder was created for it.
        </text>
        <code>
          folder "sd" "MyProject"
        </code>
      </example>
    </member>
    <member name="K:For">
      <summary>
        The For statement allows you to execute a set of statements multiple times.
      </summary>
      <example>
        <text>
          The following example will print out numbers from 1 to 10 on the EV3 screen with a pause of 0.5 seconds
        </text>
        <code>
          For i = 1 To 10
          LCD.Clear()
          LCD.Text(1, 0, 0, 1, i)
          LCD.Update()
          Program.Delay(500)
          EndFor
        </code>
      </example>
    </member>
    <member name="K:EndFor">
      <summary>
        Check the For statement for information about the EndFor keyword.
      </summary>
    </member>
    <member name="K:To">
      <summary>
        Check the For statement for information about the To keyword.
      </summary>
    </member>
    <member name="K:Step">
      <summary>
        The Step keyword is used to specify an increment in the For loop.
      </summary>
      <example>
        <text>
          The following example will print out odd numbers from 1 to 10
        </text>
        <code>
          For i = 1 to 10 Step 2
          LCD.Clear()
          LCD.Text(1, 0, 0, 1, i)
          LCD.Update()
          Program.Delay(500)
          EndFor
        </code>
      </example>
    </member>
    <member name="K:If">
      <summary>
        The If statement allows you to make decisions to do different things.
      </summary>
      <example>
        <text>
          The following example will print out either "Win" or "Lose" depending on the outcome of the flip.
        </text>
        <code>
          If flip = "Tail" Then
          LCD.Text(1, 0, 0, 1, "Win")
          Else
          LCD.Text(1, 0, 0, 1, "Lose")
          EndIf
          LCD.Update()
          Program.Delay(3000)
        </code>
      </example>
    </member>
    <member name="K:Then">
      <summary>
        Check the If statement for information about the Then keyword.
      </summary>
    </member>
    <member name="K:Else">
      <summary>
        Check the If statement for information about the Else keyword.
      </summary>
    </member>
    <member name="K:ElseIf">
      <summary>
        The ElseIf keyword helps provide an alternate condition while making decisions using the If statement.
      </summary>
      <example>
        <text>
          In the following example, we will print out the right greeting based on the time of the day (variable hours).
        </text>
        <code>
          hours = 18
          LCD.Clear()
          If hours &lt; 12 Then
          LCD.Text(1, 0, 0, 1, "AM")
          ElseIf hours > 13 Then
          LCD.Text(1, 0, 0, 1, "PM")
          EndIf
          LCD.Update()
          Program.Delay(3000)
        </code>
      </example>
    </member>
    <member name="K:EndIf">
      <summary>
        Check the If statement for information about the EndIf keyword.
      </summary>
    </member>
    <member name="K:Goto">
      <summary>
        The Goto statement allows branching to a new location in the program.  
      </summary>
      <example>
        <text>
          The following program will print consecutive numbers endlessly.
        </text>
        <code>
          i = 0
          start:
          i = i + 1
          LCD.Text(1, 0, 0, 1, i)
          LCD.Update()
          Program.Delay(500)
          LCD.Clear()
          Goto start
        </code>
      </example>
    </member>
    <member name="K:Function">
      <summary>
        Функция. 
      </summary>
      <example>
        <text>
          Данный пример содержит функцию, которая выводит на экран текст "OMG!".
        </text>
        <code>
          WriteToScreen(2, "OMG!")
          Program.Delay(5000)

          Function WriteToScreen (in number fontSize, in string message)
          LCD.Clear()
          LCD.Text(1, 0, 0, fontSize, message)
          LCD.Update()
          EndFunction
        </code>
      </example>
    </member>
    <member name="K:EndFunction">
      <summary>
        Оператор завершения функции.
      </summary>
    </member>
    <member name="K:private">
      <summary>
        The command is only used in module files (.bmp). It is written in a separate line, which shall not contain any other code. A command can be declared in a module only once. All the code following the “private” command (module methods and properties) is considered closed for other parts of the program and can only be accessed by this module. Calling “private” methods and properties of the module in other parts of the program will result in an error. Accordingly, all the code (methods and properties) preceding the “private” command can be called from any part of the program.
      </summary>
    </member>
    <member name="K:Sub">
      <summary>
        The Sub (Subroutine) statement allows you to do groups of things with a single call.
      </summary>
      <example>
        <text>
          The following example defines a subroutine that rings the bell and prints "OMG!".
        </text>
        <code>
          Sub Hello
          LCD.Clear()
          LCD.Text(1, 0, 0, 1, "OMG!")
          LCD.Update()
          EndSub
          Hello()
          Program.Delay(5000)
        </code>
      </example>
    </member>
    <member name="K:EndSub">
      <summary>
        Check the Sub statement for information about the EndSub keyword.
      </summary>
    </member>
    <member name="K:While">
      <summary>
        The While statement allows you to repeat something until you achieve a desired result.
      </summary>
      <example>
        <text>
          The following code will print a set of random numbers until one that is greater than 100 is encountered.
        </text>
        <code>
          i=1
          While i &lt; 100
          i = Math.GetRandomNumber(150)
          LCD.Text(1, 0, 0, 1, i)
          LCD.Update()
          Program.Delay(500)
          LCD.Clear()
          EndWhile
          LCD.Text(1, 0, 0, 1, i)
          LCD.Update()
          Program.Delay(3000)
        </code>
      </example>
    </member>
    <member name="K:EndWhile">
      <summary>
        Check the While statement for information about the EndWhile keyword.
      </summary>
    </member>
    <member name="K:And">
      <summary>
        Does a logical computation and returns true if both inputs are true.
      </summary>
    </member>
    <member name="K:Or">
      <summary>
        Does a logical computation and returns true if either one of the inputs is true.
      </summary>
    </member>
    <member name="K:in">
      <summary>
        Applies only with the Function keyword. Indicates that the variable is used as an input parameter. After the word in, there must be the type of the variable (number, number [], string, string []), then the name of the variable.
      </summary>
    </member>
    <member name="K:out">
      <summary>
        Applies only with the Function keyword. Indicates that the variable is being used as an output parameter. After the word out, there must be a variable type (number, number [], string, string []), then the name of the variable.
      </summary>
    </member>
    <member name="K:number">
      <summary>
        Applies only with the Function keyword. Indicates that the variable will store a number. If used with [] (number []) then the variable will store a numeric array.
      </summary>
    </member>
    <member name="K:string">
      <summary>
        Applies only with the Function keyword. Indicates that the variable will store the string. If used with [] (string []) then the variable will store an array of strings.
      </summary>
    </member>
  </members>
</doc>