<?xml version="1.0"?>
<doc>
  <members>
    <member name="T:Thread">
      <summary>
        This object supports the use of threads in a program. 
        A thread is a piece of program code that can run independently and at the same time as other parts of the program. For example, you could create a thread that controls the motors, while a different thread can watch sensors or user input.
        Generally speaking, multithreading is quite a complex topic. To really understand it, some extra study is recommended.
      </summary>
    </member>
    <member name="M:Yield">
      <summary>
        Explicitly gives up control of the CPU so other threads may do their work.
        Threads are often not really running in parallel because there may be not enough CPUs to exclusively do the work for each thread. Instead, the CPU will do a bit of work on one thread and then jump to the next thread and so on very quickly, to make it look like everything is running in parallel.
        Whenever a thread has nothing to do just now, but needs to wait for some condition to arrive, it can give up the control of the CPU with the Yield() function, so other threads get the chance to do their work. 
      </summary>
    </member>
    <member name="M:CreateMutex">
      <summary>
        Create a mutex (short for "mutual exclusion" handler) that can be used for thread synchronization. 
        Only creation of mutexes is supported, but not deletion. Best practice is to create all needed mutexes at program start and keep their numbers in global variables.
      </summary>
      <returns>A number specifying the new mutex. Use this for calls to Lock and Unlock</returns>
    </member>
    <member name="M:Lock">
      <summary>
        Tries to lock the given mutex exclusively so no other thread can acquire a lock on it. 
        When another thread already holds a lock on the mutex, the current thread will wait until the lock is released and then acquire the lock itself (once the function call returns, the mutex has been successfully locked).
        This locking mechanism is normally used to protect some data structures or other resources from being accessed by two threads concurrently. Every call to Lock must be paired with a call to a subsequent Unlock.
      </summary>
      <param name="mutex">The number of the mutex (as returned from CreateMutex() )</param>
    </member>
    <member name="M:Unlock">
      <summary>
        Releases a lock on a mutex. This function must only be called when there was indeed a preceding call to Lock. 
      </summary>
      <param name="mutex">The number of the mutex (as returned from CreateMutex() )</param>
    </member>
    <member name="E:Run">
      <summary>
        With this property, new threads are created. Just assign a subprogram to this and the subprogram will start running as an independent thread (for example, Thread.Run = MYSUB). 
        Any subprogram can be used to create an independent thread, but you can start the same subprogram only as one thread. A second use of Thread.Run, while the specified subprogram is still running, will just add the call to a queue that is processed after the previous run was finished. No runs will be lost in this case, but probably scheduled for a later time.
        Note that even in the presence of running threads, the whole program stops as soon as the main program runs to its end.
      </summary>
    </member>
  </members>
</doc>